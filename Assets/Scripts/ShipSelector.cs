using UnityEngine;
using UnityEngine.UI;

public class ShipSelector : Monobehaviour
{
    public GOO[\ipPirate MainShip"];
    public Button selectButton;

    private int selectedIndex = 0;

    void Start()
    {
        // Hide all ships initially
        for (int i = 0; i < ships.Length; i++)
        {
            ships[i].setActive(false);
        }

        // Show the first ship and enable selection
        ships[selectedIndex].setActive(true);
        selectButton.onClick.AddListener(SelectNextShip);
    }

    void SelectNextShip()
    {
        // Deactivate the currently selected ship
        ships[selectedIndex].setActive(false);

        // Move to the next ship in the array
        selectedIndex = (selectedIndex + 1) % ships.Length;
        ships[selectedIndex].setActive(true);
    }
}